version: "3"

services:
  taxi-front:
    container_name: taxi-front-dev
    restart: always
    image: ${FRONT_IMAGE:-taxi-front}
    ports:
      - "${FRONT_PORT:?err}:80"
    environment:
      - REACT_APP_BACK_URL=${BACK_URL:?err}
      - REACT_APP_IO_URL=${SOCKET_IO_URL:?err}
      - REACT_APP_S3_URL=${S3_URL:?err}
      - REACT_APP_CHANNELTALK_PLUGIN_KEY=${CHANNELTALK_PLUGIN_KEY}
      - REACT_APP_GA_TRACKING_ID=${GA_TRACKING_ID}
    labels:
      - 'com.centurylinklabs.watchtower.lifecycle.pre-update=curl -X POST -H ''Content-type: application/json'' --data ''{"text":"업데이트를 위해 taxi-front-dev 서비스를 종료시켰습니다."}'' ${SLACK_WATCHTOWER_WEBHOOK}'
      - 'com.centurylinklabs.watchtower.lifecycle.post-update=curl -X POST -H ''Content-type: application/json'' --data ''{"text":"업데이트 후 taxi-front-dev 서비스를 재시작하였습니다."}'' ${SLACK_WATCHTOWER_WEBHOOK}'

  taxi-back:
    container_name: taxi-back-dev
    restart: always
    image: ${BACK_IMAGE:-taxi-back}
    ports:
      - "${BACK_PORT:?err}:80"
    depends_on:
      - taxi-mongo
      - taxi-redis
    links:
      - taxi-mongo:taxi-mongo
      - taxi-redis:taxi-redis
    environment:
      - SESSION_KEY=${SESSION_KEY:?err}
      - SPARCSSSO_CLIENT_ID=${SPARCSSSO_CLIENT_ID}
      - SPARCSSSO_CLIENT_KEY=${SPARCSSSO_CLIENT_KEY}
      - FRONT_URL=${FRONT_URL:?err}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME:-sparcs-taxi-dev}
      - DB_PATH=mongodb://taxi-mongo:27017/taxi
      - REDIS_PATH=redis://taxi-redis:6379
    labels:
      - 'com.centurylinklabs.watchtower.lifecycle.pre-update=curl -X POST -H ''Content-type: application/json'' --data ''{"text":"업데이트를 위해 taxi-back-dev 서비스를 종료시켰습니다."}'' ${SLACK_WATCHTOWER_WEBHOOK}'
      - 'com.centurylinklabs.watchtower.lifecycle.post-update=curl -X POST -H ''Content-type: application/json'' --data ''{"text":"업데이트 후 taxi-back-dev 서비스를 재시작하였습니다."}'' ${SLACK_WATCHTOWER_WEBHOOK}'
    volumes:
      - taxi-back-dev-logs:/usr/src/app/logs:rw

  taxi-mongo:
    container_name: taxi-mongo-dev
    restart: always
    image: mongo:4.4
    volumes:
      - ./taxi-mongo/mongodb.conf:/etc/mongodb.conf

  taxi-redis:
    container_name: taxi-redis-dev
    restart: always
    image: redis:7.0.4-alpine

  taxi-watchtower:
    container_name: taxi-watchtower-dev
    image: containrrr/watchtower:latest
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./taxi-ecr-helper/config.json:/config.json
      - taxi-ecr-helper-executable:/go/bin
    environment:
      - HOME=/
      - TZ=Asia/Seoul
      - PATH=$PATH:/go/bin
      - AWS_REGION=ap-northeast-2
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:?err}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:?err}
    command: --debug --interval 60 --cleanup --enable-lifecycle-hooks taxi-front-dev taxi-back-dev
    # --interval 60 : 이미지 업데이트를 60초 마다 하도록 지정
    # --cleanup : 업데이트 후 오래된 이미지 제거
    # --enable-lifecycle-hooks : 컨테이너 업데이트 시 스크립트 실행 활성화
    # taxi-front taxi-back : 업데이트 할 container 지정

volumes:
  taxi-back-dev-logs:
    external: true
  taxi-ecr-helper-executable:
    external: true
